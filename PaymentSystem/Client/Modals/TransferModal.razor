@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PaymentSystem.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Nav

@if (WalletList == null)
{
    <div>
        Loading...
    </div>
}
else
{
<div>
    <div class="mb-2">
        <span>Select wallet:</span>
        <select @bind="transferDto.Currency">
            @foreach (var wallet in WalletList)
            {
                <option @onclick="() => ChangeAmountValue(wallet.Amount)" value="@wallet.Currency">Wallet in @wallet.Currency</option>
            }
        </select>
    </div>
    <div class="mb-2">
        <p class="card-text"> Current Amount: @Amount</p>
    </div>
    <div class="mb-2">
        <select>
            <option disabled>Transfer To: </option>
            <option @onclick="() => OwnIsActive()">Transfer to Own Card</option>
            <option @onclick="() => ToUserIsActive()">Transfer to User</option>
        </select>
    </div>
    @if (UserCardTransferIsActive)
    {
        <div class="input-group p-0 col-md-12 mb-3">
            <input type="text" @bind="transferDto.UserName" @onfocusout="ValidateUser" class="form-control @RecipientInputClass" placeholder="@placeholderMessage" aria-label="Username" aria-describedby="basic-addon1">
        </div>
        <div class="input-group p-0 col-md-12 mb-3">
            <input type="text" @bind="transferDto.Amount" class="form-control" placeholder="Amount" aria-label="Amount" aria-describedby="basic-addon1">
        </div>
    }

    @if (OwnCardTransferIsActive)
    {
        <select @bind="transferDto.Id">
            @foreach (var wallet in WalletList)
            {
                <option @onclick="() => UserName(wallet.Currency)"  value="@wallet.Id">Wallet in @wallet.Currency</option>
            }
        </select>

        <div class="input-group p-0 col-md-12 mb-3">
            <input type="text" @bind="transferDto.Amount" class="form-control" placeholder="Amount" aria-label="Amount" aria-describedby="basic-addon1">
        </div>
    }

    <button class="btn btn-primary" @onclick="MakeTransfer">Make Transfer</button>
    <button class="btn btn-secondary" @onclick="BlazoredModal.Cancel">Close</button>
</div>
}




@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public string Currency { get; set; }
    [Parameter] public decimal Amount { get; set; }

    private List<string> Curr { get; set; }
    private List<Wallet> WalletList { get; set; }
    public TransferDto transferDto { get; set; } = new TransferDto();


    private string RecipientInputClass { get; set; }
    private string placeholderMessage = "Username";
    private bool OwnCardTransferIsActive { get; set; } = false;
    private bool UserCardTransferIsActive { get; set; } = false;
    private string Curre { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            WalletList = await Http.GetFromJsonAsync<List<Wallet>>($"api/wallet");

            transferDto.Currency = Currency;

            await LoadCurr();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ValidateUser()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(transferDto.UserName))
            {
                RecipientInputClass = "is-invalid";
                placeholderMessage = "User empty or not found";
            }
            else
            {
                var userValidationResult = await Http.GetFromJsonAsync<UserValidationResult>($"api/user/{transferDto.UserName}/validate");

                if (userValidationResult.Exists)
                {
                    RecipientInputClass = "border border-success";
                }
                else
                {
                    RecipientInputClass = "is-invalid";
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task LoadCurr()
    {
        Curr = await Http.GetFromJsonAsync<List<string>>("api/wallet/walletcurrency");
    }


    private async Task MakeTransfer()
    {
        try
        {
            CalculateAmount(Curre);

            var response = await Http.PostAsJsonAsync("api/transfer", transferDto);

            Nav.NavigateTo("wallets");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool OwnIsActive()
    {
        UserCardTransferIsActive = false;
        return OwnCardTransferIsActive = true;
    }

    private bool ToUserIsActive()
    {
        OwnCardTransferIsActive = false;
        return UserCardTransferIsActive = true;
    }

    private void UserName(string curr)
    {
        transferDto.UserName = "User";
        Curre = curr;

    }

    private void ChangeAmountValue(decimal amount)
    {
        Amount = amount;
    }



    private decimal CalculateAmount(string curr)
    {

        switch (transferDto.Currency)
        {
            case "USD":
                switch (curr)
                {
                    case "EUR":
                        transferDto.Amount = transferDto.Amount * 18 / 20;
                        break;
                    case "MDL":
                        transferDto.Amount *= 18;
                        break;
                }
                break;
            case "EUR":
                switch (curr)
                {
                    case "USD":
                        transferDto.Amount = transferDto.Amount * 20 / 18;
                        break;
                    case "MDL":
                        transferDto.Amount *= 20;
                        break;
                }
                break;
            case "MDL":
                switch (curr)
                {
                    case "EUR":
                        transferDto.Amount /= 20;
                        break;
                    case "USD":
                        transferDto.Amount /= 18;
                        break;
                }
                break;
        }

        return transferDto.Amount;
    }
}