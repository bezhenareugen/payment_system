@page "/wallets"
@using PaymentSystem.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.WebUtilities
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager navManager
@inject IModalService Modal

<style>
    .wallet {
        width: 250px;
        border: 1px solid #555;
        border-radius: 5px;
        margin: 10px;
        padding: 10px;
    }
</style>

<h3>Wallets</h3>

@if (WalletList == null)
{
    <div>Loading...</div>
}
else
{
    <div class="d-flex flex-wrap">
        @foreach (var wallet in WalletList)
        {
            <div class="card m-2" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Wallet</h5>
                    <p class="card-text">Currency: @wallet.Currency</p>
                    <p class="card-text">Amount: @wallet.Amount</p>
                    <button class="btn btn-primary" @onclick="() => MakeTransfer(wallet.Currency, wallet.Amount)">Make transfer</button>
                    <button class="btn btn-danger" @onclick="() => DeleteWallet(wallet.Id)">Delete wallet</button>
                </div>
            </div>
        }
    </div>

    @if (AllowedCurrencies.Any())
    {
        <div class="mt-3">
            <h3>Create a new wallet</h3>

            <select @bind="Currency">
                @foreach (var currency in AllowedCurrencies)
                {
                    <option value="@currency">@currency</option>
                }
            </select>

            <button class="btn btn-primary" @onclick="() => CreateWallet()">Create wallet</button>
        </div>
    }
    else
    {
        <div>You already have one wallet in each currency.</div>
    }
}

@if (privatBankCurrencies == null)
{
    <div>Load Currencies From API...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Currency</th>
                <th scope="col">Base Currency</th>
                <th scope="col">Buy</th>
                <th scope="col">Sale</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in privatBankCurrencies)
            {
                <tr>
                    <td>@item.Ccy</td>
                    <td>@item.Base_Ccy</td>
                    <td>@item.Buy</td>
                    <td>@item.Sale</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private CurrencyList CurrencyList;
    private List<string> AllowedCurrencies;

    private List<PaymentSystem.Shared.CurrencyApi.PrivatBankCurrencies> privatBankCurrencies  { get; set; } = new List<PaymentSystem.Shared.CurrencyApi.PrivatBankCurrencies>();

    private List<Wallet> WalletList;
    private string Currency;



    protected override async Task OnInitializedAsync()
    {
        await LoadCurrencies();
        await LoadWallets();
        GetAllowedCurrencies();
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(Constants.transferSuccess, out var successValue))
        {
            if (!Convert.ToBoolean(successValue))
            {
                Modal.Show<Client.Modals.TransferStatusModal>("Transfer result");
            }
        }
        await LoadPrivatBankCurrency();
    }

    private async Task LoadCurrencies()
    {
        try
        {
            CurrencyList = await HttpClient.GetFromJsonAsync<CurrencyList>("api/currency");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task LoadWallets()
    {
        try
        {
            WalletList = await HttpClient.GetFromJsonAsync<List<Wallet>>("api/wallet");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void GetAllowedCurrencies()
    {
        AllowedCurrencies = new List<string>();

        foreach (var currency in CurrencyList.Currencies)
        {
            if (!WalletList.Any(x => x.Currency == currency))
            {
                AllowedCurrencies.Add(currency);
            }
        }

        Currency = AllowedCurrencies.FirstOrDefault();
    }


    private async Task LoadPrivatBankCurrency()
    {
        privatBankCurrencies = await HttpClient.GetFromJsonAsync<List<PaymentSystem.Shared.CurrencyApi.PrivatBankCurrencies>>("https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5");

        if (privatBankCurrencies == null)
        {
            throw new Exception();
        }
        else
        {
            Console.WriteLine(privatBankCurrencies);
        }
    }

    private async Task CreateWallet()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Currency))
                return;

            var response = await HttpClient.PostAsJsonAsync("api/wallet/", Currency);

            if (response.IsSuccessStatusCode)
            {
                await LoadWallets();
                GetAllowedCurrencies();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteWallet(Guid id)
    {
        try
        {
            await HttpClient.DeleteAsync("api/wallet/" + id);
            await LoadWallets();
            GetAllowedCurrencies();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task MakeTransfer(string currency, decimal amount)
    {
        try
        {
            var parameters = new ModalParameters();

            parameters.Add(nameof(Client.Modals.TransferModal.Currency), currency);
            parameters.Add(nameof(Client.Modals.TransferModal.Amount), amount);

            var modal = Modal.Show<Client.Modals.TransferModal>("Transfer", parameters);
            var result = await modal.Result;

            if (result.Cancelled)
            {
                await LoadWallets();
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
