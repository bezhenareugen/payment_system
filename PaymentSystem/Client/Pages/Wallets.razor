@page "/wallets"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PaymentSystem.Shared
@attribute [Authorize]
@inject HttpClient Http



<h3>Wallets</h3>

<style>
    .wallets {
        width: 250px;
        border: 1px solid black;
        border-radius: 5px;
        margin: 10px;
        padding: 10px;
    }
</style>

@if (WalletList == null || WalletList.Length == 0)
{
    <div>Loading...</div>
}
else
{
    @foreach (var wallet in WalletList)
    {
        <div class="wallets">
            <div>@wallet.Id</div>
            <div>
                <span>@wallet.Amount</span>

                <span>@wallet.Currency</span>
            </div>
            <button @onclick="() => DeleteWallet(wallet.Id)">Delete Wallet</button>

            <button @onclick="MakeTransfer">Make Transfer</button>
          
          
        </div>


    }
    
}


<div>
    <h3>Create a new wallet</h3>
    <input type="text" placeholder="Currency" @bind="Currency" />

    <button @onclick="() => CreateWallet()">Create</button>
</div>



@code {
    private Wallet[] WalletList;
    private string Currency;



    protected override async Task OnInitializedAsync()
    {
        await LoadWallets();
    }

    private async Task LoadWallets()
    {
        try
        {
            WalletList = await Http.GetFromJsonAsync<Wallet[]>("api/wallet");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task CreateWallet()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Currency))
            {
                return;
            }

            var respone =  await Http.PostAsJsonAsync("api/wallet", Currency);

            if(respone.IsSuccessStatusCode)
            {
                await LoadWallets();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }



    private async Task DeleteWallet(Guid id)
    {
        try
        {
            var response =  Http.DeleteAsync($"api/wallet/{id}");

            await LoadWallets();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    private async Task MakeTransfer(Guid id )
    {

        try
        {
         
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
