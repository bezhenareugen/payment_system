@page "/transferhistory"
@using PaymentSystem.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http

<div class="nav-page">
    <h3>Transaction History</h3>

    <select @bind="itemsPerPage" @onclick="() => ChangeItemsOnPage()">
        <option value="3">3</option>
        <option value="6">6</option>
        <option value="8">8</option>
    </select>
</div>

@if (PagenetedTransfer == null)
{
    <div>Loading...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Source User</th>
                <th scope="col" class="sort-link">
                    <a @onclick="() => SortByAmount()">Amount</a>
                </th>
                <th scope="col">Destination User</th>
                <th scope="col" class="sort-link">
                    <a @onclick="() => SortByDate()">Date</a>
                </th>
                <th scope="col">ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PagenetedTransfer.Transactions)
            {
                <tr>
                    <td>@item.SourceUsername</td>
                    <td>@item.Amount</td>
                    <td>@item.DestinationUsername</td>
                    <td>@item.Date</td>
                    <td>@item.Id</td>
                </tr>
            }
        </tbody>
    </table>

        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-end">
                <li class="page-item disabled">
                    <a class="page-link">Previous</a>
                </li>
                @for (int i = 1; i <= PagenetedTransfer.MaxPageNumber; i++)
                {
                    var buttonNumber = i;
                    <li class="page-item"><a class="page-link sort-link" @onclick="() => ChangePage(buttonNumber)">@i</a></li>
                }
                <li class="page-item">
                    <a class="page-link">Next</a>
                </li>
            </ul>
        </nav>
}

<style>
    .sort-link {
        cursor: pointer;
    }

    .nav-page {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
</style>


@code {
    private PagenetedTransferHistory PagenetedTransfer;
    private bool IsAsc { get; set; }
    private string SortDir { get; set; } = "asc";
    private string SortBy { get; set; } = "Date";
    private int pageNumber { get; set; } = 1;
    private int itemsPerPage { get; set; } = 8;


    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        try
        {
            PagenetedTransfer = await Http.GetFromJsonAsync<PagenetedTransferHistory>($"api/transferhistory?sortDir={SortDir}&sortBy={SortBy}&pageNumber={pageNumber}&itemsPerPage={itemsPerPage}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    private async Task ChangePage(int cureentPage)
    {
        pageNumber = cureentPage;
        await LoadTransactions();
    }

    private void SortFilter()
    {
        if (IsAsc)
        {
            SortDir = "asc";
            IsAsc = false;
        }
        else
        {
            SortDir = "desc";
            IsAsc = true;
        }
    }

    private async Task SortByDate()
    {
        try
        {
            SortFilter();
            await LoadTransactions();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task SortByAmount()
    {
        SortBy = "Amount";

        try
        {
            SortFilter();
            await LoadTransactions();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ChangeItemsOnPage()
    {
        await LoadTransactions();
    }
}
