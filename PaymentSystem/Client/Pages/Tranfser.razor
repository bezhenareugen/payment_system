@page "/transfer"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PaymentSystem.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Nav


<h3>Tranfser</h3>


@if (WalletList == null)
{
    <div>
        Loading...
    </div>
}
else
{
    <div>
        <div class="mb-3">
            <span>Select currency:</span>
            <select @bind="transferDto.Currency">
                @foreach (var wallet in WalletList)
                {
                    <option value="@wallet.Currency">@wallet.Currency</option>
                }
            </select>
        </div>
        <div class="input-group p-0 col-md-3 mb-3">
            <input type="text" @bind="transferDto.UserName" @onfocusout="ValidateUser" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1">
        </div>
        <div class="input-group p-0 col-md-3 mb-3">
            <input type="text" @bind="transferDto.Amount" class="form-control" placeholder="Amount" aria-label="Username" aria-describedby="basic-addon1">
        </div>

        <button class="btn btn-primary" @onclick="MakeTransfer">Make Transfer</button>
    </div>
}


@code {
    private List<Wallet> WalletList { get; set; }

    public TransferDto transferDto { get; set; } = new TransferDto();
    private string RecipientInputClass { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            WalletList = await Http.GetFromJsonAsync<List<Wallet>>($"api/wallet");
            transferDto.Currency = WalletList.FirstOrDefault()?.Currency;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ValidateUser()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<UserValidationResult>($"api/user/{transferDto.UserName}/validate");

            if (result.Exists)
            {
                RecipientInputClass = "border border-success";
            }
            else
            {
                RecipientInputClass = "is-invalid";

            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task MakeTransfer()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/transfer", transferDto);

            if (response.IsSuccessStatusCode)
            {
                Nav.NavigateTo("wallets");
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
